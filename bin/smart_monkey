#!/usr/bin/env ruby
# coding: utf-8
Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8
Version = File.read(File.expand_path('../../VERSION', __FILE__))

require 'optparse'

$: << File.dirname(__FILE__) + '/../lib'
require 'smart_monkey'

opts = {}
ARGV.options do |o|
  o.on('-a app_name', 'Bundle ID of the desired target on device(Required)') {|b| opts[:app_path] = b}
  o.on('-p app_apth', 'Absolute AppPath of the desired target') {|b| opts[:abs_app_path] = b}
  o.on('-w device', 'Target Device UDID') {|b| opts[:device] = b}
  o.on('-n run_count', 'How many times monkeys run(default: 1)') {|b| opts[:run_count] = b.to_i}
  o.on('-d result_dir', 'Where to output result(default: ./smart_monkey_result)') {|b| opts[:result_base_dir] = File.expand_path(b)}
  o.on('-t time_limit_sec', 'Time limit of running(Required)') {|b| opts[:time_limit_sec] = b.to_i}
  o.on('-j jar', 'The .jar path of monkey(Required)') {|b| opts[:jar] = b}
  o.on('--port', 'Macaca server port(default: 3456)') {|b| opts[:port] = b.to_i}
  o.on('--proxyport', 'proxyport(default: 8900)') {|b| opts[:proxyport] = b.to_i}
  o.on('-s dsym_file', 'Use .dSYM file to symbolicating crash logs') {|b| opts[:dsym_file_path] = File.expand_path(b)}
  o.on('-c custom_cfg_path', 'Indicate confige lib directory path, not a file path.') {|b| opts[:custom_cfg_path] = File.expand_path(b)}
  o.on('--event-number event_number', 'The monkey event number(default: 50)'){|b| opts[:event_number] = b}
  o.on('--compress-result compress_rate', 'compress the screenshot images to save disk space!(example: 50%)'){|b| opts[:compress_rate] = b}
  o.on('--detail-count detail_event_count', 'How many events to show in detail result page(default 50)'){|b| opts[:detail_event_count] = b.to_i}
  o.on('--show-config', 'Show Current Configuration custom.js') {|_| opts[:show_config] = true}
  o.on('--drop-useless-img', 'Delete the un-displayed images of detial page.') {|_| opts[:drop_useless_img] = true}
  o.on('--list-app', 'Show List of Installed Apps in iPhone/iPhone Simulator') {|_| opts[:list_app] = true}
  o.on('--list-devices', 'Show List of Devices') {|_| opts[:list_devices] = true}
  o.on('--reset-ios-sim', 'Reset iPhone Simulator'){|_| opts[:reset_iphone_simulator] = true}
  o.on('--version', 'print smart monkey version'){|_| opts[:version] = true}
  o.parse!
end

MonkeyDoctor.run_env_doctor

if opts[:version]
  dirname = File.dirname(File.dirname(__FILE__))
  filepath = File.join(dirname, "VERSION")
  puts File.open(filepath, 'rb') { |file| file.read }
  exit(1)
end

if opts[:custom_cfg_path]
  if !File.directory? opts[:custom_cfg_path]
    puts ARGV.options.help 
    exit(1) 
  end
end

unless opts[:app_path] || opts[:show_config] || opts[:list_app] || opts[:reset_iphone_simulator] || opts[:list_devices]
  puts ARGV.options.help
  exit(1)
end

opts[:run_count] ||= 1
opts[:time_limit_sec] ||= nil
opts[:detail_event_count] ||= 50
opts[:port] ||= 3456
opts[:proxyport] ||= 8900
result_ok = UIAutoMonkey::MonkeyRunner.new.run(opts)

puts result_ok ? 'EXIT 0' : 'EXIT 1' unless opts[:show_config] || opts[:list_app] || opts[:list_devices]

exit(result_ok ? 0 : 1)
